// Code generated by mockery. DO NOT EDIT.

package domain_mock

import (
	domain "github.com/saime-0/nice-pea-chat/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MembersRepositoryMock is an autogenerated mock type for the MembersRepository type
type MembersRepositoryMock struct {
	mock.Mock
}

type MembersRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *MembersRepositoryMock) EXPECT() *MembersRepositoryMock_Expecter {
	return &MembersRepositoryMock_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: id
func (_m *MembersRepositoryMock) Delete(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MembersRepositoryMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MembersRepositoryMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id string
func (_e *MembersRepositoryMock_Expecter) Delete(id interface{}) *MembersRepositoryMock_Delete_Call {
	return &MembersRepositoryMock_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *MembersRepositoryMock_Delete_Call) Run(run func(id string)) *MembersRepositoryMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MembersRepositoryMock_Delete_Call) Return(_a0 error) *MembersRepositoryMock_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MembersRepositoryMock_Delete_Call) RunAndReturn(run func(string) error) *MembersRepositoryMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: filter
func (_m *MembersRepositoryMock) List(filter domain.MembersFilter) ([]domain.Member, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.Member
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.MembersFilter) ([]domain.Member, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(domain.MembersFilter) []domain.Member); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Member)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.MembersFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MembersRepositoryMock_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MembersRepositoryMock_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - filter domain.MembersFilter
func (_e *MembersRepositoryMock_Expecter) List(filter interface{}) *MembersRepositoryMock_List_Call {
	return &MembersRepositoryMock_List_Call{Call: _e.mock.On("List", filter)}
}

func (_c *MembersRepositoryMock_List_Call) Run(run func(filter domain.MembersFilter)) *MembersRepositoryMock_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.MembersFilter))
	})
	return _c
}

func (_c *MembersRepositoryMock_List_Call) Return(_a0 []domain.Member, _a1 error) *MembersRepositoryMock_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MembersRepositoryMock_List_Call) RunAndReturn(run func(domain.MembersFilter) ([]domain.Member, error)) *MembersRepositoryMock_List_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: member
func (_m *MembersRepositoryMock) Save(member domain.Member) error {
	ret := _m.Called(member)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Member) error); ok {
		r0 = rf(member)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MembersRepositoryMock_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MembersRepositoryMock_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - member domain.Member
func (_e *MembersRepositoryMock_Expecter) Save(member interface{}) *MembersRepositoryMock_Save_Call {
	return &MembersRepositoryMock_Save_Call{Call: _e.mock.On("Save", member)}
}

func (_c *MembersRepositoryMock_Save_Call) Run(run func(member domain.Member)) *MembersRepositoryMock_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Member))
	})
	return _c
}

func (_c *MembersRepositoryMock_Save_Call) Return(_a0 error) *MembersRepositoryMock_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MembersRepositoryMock_Save_Call) RunAndReturn(run func(domain.Member) error) *MembersRepositoryMock_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMembersRepositoryMock creates a new instance of MembersRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMembersRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MembersRepositoryMock {
	mock := &MembersRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
