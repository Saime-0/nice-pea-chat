// Code generated by mockery. DO NOT EDIT.

package domain_mock

import (
	domain "github.com/saime-0/nice-pea-chat/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// ChatsRepositoryMock is an autogenerated mock type for the ChatsRepository type
type ChatsRepositoryMock struct {
	mock.Mock
}

type ChatsRepositoryMock_Expecter struct {
	mock *mock.Mock
}

func (_m *ChatsRepositoryMock) EXPECT() *ChatsRepositoryMock_Expecter {
	return &ChatsRepositoryMock_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: id
func (_m *ChatsRepositoryMock) Delete(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChatsRepositoryMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ChatsRepositoryMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id string
func (_e *ChatsRepositoryMock_Expecter) Delete(id interface{}) *ChatsRepositoryMock_Delete_Call {
	return &ChatsRepositoryMock_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *ChatsRepositoryMock_Delete_Call) Run(run func(id string)) *ChatsRepositoryMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ChatsRepositoryMock_Delete_Call) Return(_a0 error) *ChatsRepositoryMock_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChatsRepositoryMock_Delete_Call) RunAndReturn(run func(string) error) *ChatsRepositoryMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: filter
func (_m *ChatsRepositoryMock) List(filter domain.ChatsFilter) ([]domain.Chat, error) {
	ret := _m.Called(filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.ChatsFilter) ([]domain.Chat, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(domain.ChatsFilter) []domain.Chat); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.ChatsFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChatsRepositoryMock_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ChatsRepositoryMock_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - filter domain.ChatsFilter
func (_e *ChatsRepositoryMock_Expecter) List(filter interface{}) *ChatsRepositoryMock_List_Call {
	return &ChatsRepositoryMock_List_Call{Call: _e.mock.On("List", filter)}
}

func (_c *ChatsRepositoryMock_List_Call) Run(run func(filter domain.ChatsFilter)) *ChatsRepositoryMock_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.ChatsFilter))
	})
	return _c
}

func (_c *ChatsRepositoryMock_List_Call) Return(_a0 []domain.Chat, _a1 error) *ChatsRepositoryMock_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChatsRepositoryMock_List_Call) RunAndReturn(run func(domain.ChatsFilter) ([]domain.Chat, error)) *ChatsRepositoryMock_List_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: chat
func (_m *ChatsRepositoryMock) Save(chat domain.Chat) error {
	ret := _m.Called(chat)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Chat) error); ok {
		r0 = rf(chat)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChatsRepositoryMock_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type ChatsRepositoryMock_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - chat domain.Chat
func (_e *ChatsRepositoryMock_Expecter) Save(chat interface{}) *ChatsRepositoryMock_Save_Call {
	return &ChatsRepositoryMock_Save_Call{Call: _e.mock.On("Save", chat)}
}

func (_c *ChatsRepositoryMock_Save_Call) Run(run func(chat domain.Chat)) *ChatsRepositoryMock_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.Chat))
	})
	return _c
}

func (_c *ChatsRepositoryMock_Save_Call) Return(_a0 error) *ChatsRepositoryMock_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChatsRepositoryMock_Save_Call) RunAndReturn(run func(domain.Chat) error) *ChatsRepositoryMock_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewChatsRepositoryMock creates a new instance of ChatsRepositoryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChatsRepositoryMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChatsRepositoryMock {
	mock := &ChatsRepositoryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
